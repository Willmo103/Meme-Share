{
  "Meme-Share": {
    ".env": {
      "content": "ignored"
    },
    ".git": {
      "content": "ignored"
    },
    ".gitignore": {
      "content": "ignored"
    },
    ".venv": {
      "content": "ignored"
    },
    "app": {
      "forms": {
        "admin_login_form.py": {
          "content": "from flask_wtf import FlaskForm\r\nfrom wtforms import StringField, PasswordField, SubmitField\r\nfrom wtforms.validators import DataRequired\r\n\r\n\r\nclass AdminLoginForm(FlaskForm):\r\n    username = StringField(\"Username\", validators=[DataRequired()])\r\n    password = PasswordField(\"Password\", validators=[DataRequired()])\r\n    submit = SubmitField(\"Login\")\r\n"
        },
        "login_form.py": {
          "content": "from flask_wtf import FlaskForm\r\nfrom wtforms import (\r\n    StringField,\r\n    PasswordField,\r\n    BooleanField,\r\n    SubmitField,\r\n)\r\nfrom wtforms.validators import (\r\n    DataRequired,\r\n)\r\n\r\n\r\nclass LoginForm(FlaskForm):\r\n    username = StringField(\"Username\", validators=[DataRequired()])\r\n    password = PasswordField(\"Password\", validators=[DataRequired()])\r\n    remember_me = BooleanField(\"Remember Me\")\r\n    submit = SubmitField(\"Sign In\")\r\n"
        },
        "register_form.py": {
          "content": "from flask_wtf import FlaskForm\r\nfrom wtforms import StringField, PasswordField, SubmitField, EmailField, ValidationError\r\nfrom wtforms.validators import DataRequired, Length, Email, EqualTo\r\nfrom app.models import User\r\n\r\n\r\nclass RegistrationForm(FlaskForm):\r\n    username = StringField(\r\n        \"Username\", validators=[DataRequired(), Length(min=2, max=20)]\r\n    )\r\n    email = EmailField(\"Email\", validators=[DataRequired(), Email()])\r\n    password = PasswordField(\r\n        \"Password\",\r\n        validators=[DataRequired(), Length(min=8, max=20), EqualTo(\"confirm_password\")],\r\n    )\r\n    confirm_password = PasswordField(\r\n        \"Confirm Password\", validators=[DataRequired(), Length(min=8, max=20)]\r\n    )\r\n    submit = SubmitField(\"Sign Up\")\r\n\r\n    def validate_username(self, username):\r\n        user = User.query.filter_by(username=username.data).first()\r\n        if user:\r\n            raise ValidationError(\r\n                \"Username already exists. Please choose a different username.\"\r\n            )\r\n\r\n    def validate_email(self, email):\r\n        user = User.query.filter_by(email=email.data).first()\r\n        if user:\r\n            raise ValidationError(\r\n                \"Email already exists. Please choose a different email address.\"\r\n            )\r\n"
        },
        "upload_meme_form.py": {
          "content": "from flask_wtf import FlaskForm\r\nfrom wtforms import StringField, SubmitField, TextAreaField, FileField, BooleanField\r\nfrom wtforms.validators import DataRequired, Length, ValidationError\r\n\r\n\r\ndef url_or_file(form, field):\r\n    if not field.data and not form.url.data:\r\n        raise ValidationError(\"Please provide a URL or upload a file.\")\r\n\r\n\r\nclass UploadMemeForm(FlaskForm):\r\n    description = TextAreaField(\"Description\", validators=[Length(min=2, max=1000)])\r\n    image = FileField(\"Image\", validators=[url_or_file])\r\n    url = StringField(\"URL\", validators=[Length(min=0, max=1000)])\r\n    private = BooleanField(\"Private\", default=False)\r\n    submit = SubmitField(\"Upload Meme\")\r\n"
        },
        "__init__.py": {
          "content": "from .login_form import LoginForm as LoginForm\r\nfrom .register_form import RegistrationForm as RegistrationForm\r\nfrom .upload_meme_form import UploadMemeForm as UploadMemeForm\r\nfrom .admin_login_form import AdminLoginForm as AdminLoginForm\r\n"
        },
        "__pycache__": {
          "content": "ignored"
        }
      },
      "models": {
        "comment.py": {
          "content": "# filename: comment.py\r\n# filepath: app\\models\\comment.py\r\n\r\nfrom datetime import datetime\r\nfrom app import db\r\n\r\n\r\nclass Comment(db.Model):\r\n    \"\"\"\r\n    Create a Comment model.\r\n\r\n    This model should have the following attributes:\r\n    - id (int, primary key)\r\n    - date_posted (datetime, not nullable, default=datetime.utcnow)\r\n    - posted_by (int, foreign key to user.id)\r\n    - meme_id (int, foreign key to meme.id)\r\n    - content (str, not nullable)\r\n\r\n    This model should have the following methods:\r\n    - __init__ (instantiate an object of the class)\r\n    - __repr__ (return a string representation of the object)\r\n    - save (save the comment to the database)\r\n    - delete (delete the comment from the database)\r\n    - get_id (get the id of the comment)\r\n    - get_date_posted (get the date posted of the comment)\r\n    - get_posted_by (get the user who posted the comment)\r\n    - get_meme_id (get the id of the meme the comment is on)\r\n    - get_content (get the content of the comment)\r\n    - update (update the comment in the database)\r\n    \"\"\"\r\n\r\n    id: int = db.Column(db.Integer, primary_key=True)\r\n    date_posted: datetime = db.Column(\r\n        db.DateTime, nullable=False, default=datetime.utcnow\r\n    )\r\n    posted_by: int = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\r\n    meme_id: int = db.Column(db.Integer, db.ForeignKey(\"meme.id\"), nullable=False)\r\n    content: str = db.Column(db.String(1000), nullable=False)\r\n\r\n    def __init__(self, posted_by: int, meme_id: int, content: str) -> None:\r\n        \"\"\"\r\n        Instantiate an object of the class.\r\n        @param posted_by: The user who posted the comment.\r\n        @param meme_id: The meme the comment is on.\r\n        @param content: The content of the comment.\r\n        @param date_posted: The date the comment was posted.\r\n        @return: None\r\n        \"\"\"\r\n        self.posted_by = posted_by\r\n        self.meme_id = meme_id\r\n        self.content = content\r\n\r\n    def __repr__(self) -> str:\r\n        \"\"\"\r\n        Return a string representation of the object.\r\n        @return: A string representation of the object.\r\n        \"\"\"\r\n        return f\"<Comment {self.id}>\"\r\n\r\n    def save(self):\r\n        \"\"\"\r\n        Save the comment to the database.\r\n        @return: None\r\n        \"\"\"\r\n        db.session.add(self)\r\n        db.session.commit()\r\n\r\n    def delete(self):\r\n        \"\"\"\r\n        Delete the comment from the database.\r\n        @return: None\r\n        \"\"\"\r\n        db.session.delete(self)\r\n        db.session.commit()\r\n\r\n    def update(self, content: str):\r\n        \"\"\"\r\n        Update the comment in the database.\r\n        @param content: The new content of the comment.\r\n        @return: None\r\n        \"\"\"\r\n        self.content = content\r\n        db.session.commit()\r\n\r\n    def get_id(self) -> int:\r\n        \"\"\"\r\n        Get the id of the comment.\r\n        @return: The id of the comment.\r\n        \"\"\"\r\n        return self.id\r\n\r\n    def get_date_posted(self) -> datetime:\r\n        \"\"\"\r\n        Get the date posted of the comment.\r\n        @return: The date posted of the comment.\r\n        \"\"\"\r\n        return self.date_posted\r\n\r\n    def get_posted_by(self) -> int:\r\n        \"\"\"\r\n        Get the user who posted the comment.\r\n        @return: The user who posted the comment.\r\n        \"\"\"\r\n        return self.posted_by\r\n\r\n    def get_meme_id(self) -> int:\r\n        \"\"\"\r\n        Get the id of the meme the comment is on.\r\n        @return: The id of the meme the comment is on.\r\n        \"\"\"\r\n        return self.meme_id\r\n\r\n    def get_content(self) -> str:\r\n        \"\"\"\r\n        Get the content of the comment.\r\n        @return: The content of the comment.\r\n        \"\"\"\r\n        return self.content\r\n"
        },
        "group.py": {
          "content": "# filename: group.py\r\n# filepath: app\\models\\group.py\r\n\r\nfrom app import db\r\nfrom sqlalchemy.orm import Mapped\r\n\r\n\r\nclass Group(db.Model):\r\n    \"\"\"\r\n    Create a Group model.\r\n\r\n    This model should have the following attributes:\r\n    - id (int, primary key)\r\n    - name (str, not nullable)\r\n    - owner (int, foreign key to user.id)\r\n    - private (bool, not nullable, default=False)\r\n    - members (list, secondary=\"group_members\", lazy=\"subquery\", backref=db.backref(\"groups\", lazy=True))\r\n    - memes (list, backref=\"group\", lazy=True)\r\n\r\n    This model should have the following methods:\r\n    - __init__ (instantiate an object of the class)\r\n    - __repr__ (return a string representation of the object)\r\n    - save (save the group to the database)\r\n    - delete (delete the group from the database)\r\n    - is_private (check if the group is private)\r\n    - set_private (set the group as private)\r\n    - set_name (set the name of the group)\r\n    - add_member (add a member to the group)\r\n    - remove_member (remove a member from the group)\r\n    - is_member (check if a user is a member of the group)\r\n    - is_owner (check if a user is the owner of the group)\r\n    - get_owner (get the owner of the group)\r\n    - get_members (get the members of the group)\r\n    - get_memes (get the memes of the group)\r\n    - get_name (get the name of the group)\r\n    - get_id (get the id of the group)\r\n    - get_private (get the privacy of the group)\r\n    \"\"\"\r\n\r\n    id: int = db.Column(db.Integer, primary_key=True)\r\n    name: str = db.Column(db.String(100), nullable=False)\r\n    memes: Mapped[list] = db.relationship(\"Meme\", backref=\"group\", lazy=True)\r\n    owner: int = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\r\n    private: bool = db.Column(db.Boolean, nullable=False, default=False)\r\n    members: Mapped[list] = db.relationship(\r\n        \"User\",\r\n        secondary=\"group_members\",\r\n        lazy=\"subquery\",\r\n        backref=db.backref(\"groups\", lazy=True),\r\n    )\r\n\r\n\r\n    def __init__(self, name: str, owner: int, private: bool) -> None:\r\n        \"\"\"\r\n        Instantiate an object of the class.\r\n        @param name: The name of the group.\r\n        @param owner: The owner of the group.\r\n        @param private: Whether the group is private.\r\n        @return: None\r\n        \"\"\"\r\n        self.name = name\r\n        self.owner = owner\r\n        self.private = private\r\n\r\n\r\n    def __repr__(self) -> str:\r\n        \"\"\"\r\n        Return a string representation of the object.\r\n        @return: A string representation of the object.\r\n        \"\"\"\r\n        return f\"Group('{self.id}', '{self.name}')\"\r\n\r\n\r\n    def save(self) -> None:\r\n        \"\"\"\r\n        Save the group to the database.\r\n        @return: None\r\n        \"\"\"\r\n        db.session.add(self)\r\n        db.session.commit()\r\n\r\n\r\n    def delete(self) -> None:\r\n        \"\"\"\r\n        Delete the group from the database.\r\n        @return: None\r\n        \"\"\"\r\n        db.session.delete(self)\r\n        db.session.commit()\r\n\r\n\r\n    def is_private(self) -> bool:\r\n        \"\"\"\r\n        Check if the group is private.\r\n        @return: Whether the group is private.\r\n        \"\"\"\r\n        return self.private\r\n\r\n\r\n    def set_private(self, private: bool) -> None:\r\n        \"\"\"\r\n        Set the group as private.\r\n        @param private: Whether the group is private.\r\n        @return: None\r\n        \"\"\"\r\n        self.private = private\r\n        db.session.commit()\r\n\r\n\r\n    def set_name(self, name: str) -> None:\r\n        \"\"\"\r\n        Set the name of the group.\r\n        @param name: The name of the group.\r\n        @return: None\r\n        \"\"\"\r\n        self.name = name\r\n        db.session.commit()\r\n\r\n\r\n    def add_member(self, user: int) -> None:\r\n        \"\"\"\r\n        Add a member to the group.\r\n        @param user: The user to add to the group.\r\n        @return: None\r\n        \"\"\"\r\n        self.members.append(user)\r\n        db.session.commit()\r\n\r\n\r\n    def remove_member(self, user: int) -> None:\r\n        \"\"\"\r\n        Remove a member from the group.\r\n        @param user: The user to remove from the group.\r\n        @return: None\r\n        \"\"\"\r\n        self.members.remove(user)\r\n        db.session.commit()\r\n\r\n\r\n    def is_member(self, user: int) -> bool:\r\n        \"\"\"\r\n        Check if a user is a member of the group.\r\n        @param user: The user to check.\r\n        @return: Whether the user is a member of the group.\r\n        \"\"\"\r\n        return user in self.members\r\n\r\n\r\n    def is_owner(self, user: int) -> bool:\r\n        \"\"\"\r\n        Check if a user is the owner of the group.\r\n        @param user: The user to check.\r\n        @return: Whether the user is the owner of the group.\r\n        \"\"\"\r\n        return user == self.owner\r\n\r\n\r\n    def get_owner(self) -> int:\r\n        \"\"\"\r\n        Get the owner of the group.\r\n        @return: The owner of the group.\r\n        \"\"\"\r\n        return self.owner\r\n\r\n\r\n    def get_members(self) -> list:\r\n        \"\"\"\r\n        Get the members of the group.\r\n        @return: The members of the group.\r\n        \"\"\"\r\n        return self.members\r\n\r\n\r\n    def get_memes(self) -> list:\r\n        \"\"\"\r\n        Get the memes of the group.\r\n        @return: The memes of the group.\r\n        \"\"\"\r\n        return self.memes\r\n\r\n\r\n    def get_name(self) -> str:\r\n        \"\"\"\r\n        Get the name of the group.\r\n        @return: The name of the group.\"\"\"\r\n        return self.name\r\n\r\n\r\n    def get_id(self) -> int:\r\n        \"\"\"\r\n        Get the id of the group.\r\n        @return: The id of the group.\r\n        \"\"\"\r\n        return self.id\r\n\r\n\r\n    def get_private(self) -> bool:\r\n        \"\"\"\r\n        Get the privacy of the group.\r\n        @return: The privacy of the group.\"\"\"\r\n        return self.private\r\n"
        },
        "meme.py": {
          "content": "# filename: meme.py\r\n# filepath: app\\models\\meme.py\r\n\r\nfrom PIL import Image\r\nfrom app import db\r\nfrom datetime import datetime\r\nfrom sqlalchemy.orm import Mapped\r\nimport os\r\n\r\n_upload_folder = os.environ.get(\"UPLOAD_FOLDER\")\r\n\r\n\r\nclass Meme(db.Model):\r\n    \"\"\"\r\n    Create a Meme model.\r\n\r\n    This model should have the following attributes:\r\n    - id (int, primary key)\r\n    - date_posted (datetime, not nullable, default=datetime.utcnow)\r\n    - posted_by (int, foreign key to user.id)\r\n    - url (str, nullable)\r\n    - filename (str, nullable)\r\n    - filepath (str, nullable)\r\n    - thumbnail (str, nullable)\r\n    - thumbnail_path (str, nullable)\r\n    - deleted (bool, not nullable, default=False)\r\n    - private (bool, not nullable, default=False)\r\n\r\n    This model should have the following methods:\r\n    - __init__ (instantiate an object of the class)\r\n    - __repr__ (return a string representation of the object)\r\n    - create_thumbnail (create a thumbnail of the meme)\r\n    - from_url (create a meme from a URL)\r\n    - from_upload (create a meme from an uploaded file)\r\n    - check_seen_by_user (check if a user has seen the meme)\r\n    - seen_by_user (add a user to the list of users who have seen the meme)\r\n    - get_comments (return the comments on the meme)\r\n    - save (save the meme to the database)\r\n    - delete (delete the meme from the database)\r\n    - get_id (get the id of the meme)\r\n    - get_date_posted (get the date posted of the meme)\r\n    - get_posted_by (get the user who posted the meme)\r\n    - get_url (get the URL of the meme)\r\n    - get_filename (get the filename of the meme)\r\n    - get_filepath (get the filepath of the meme)\r\n    - get_thumbnail (get the thumbnail of the meme)\r\n    - get_thumbnail_path (get the thumbnail path of the meme)\r\n    - get_deleted (get whether the meme is deleted)\r\n    - get_private (get whether the meme is private)\r\n    - get_group_id (get the id of the group the meme is in)\r\n    - get_seen_by (get the users who have seen the meme)\r\n    - get_comments (get the comments on the meme)\r\n    - update (update the meme in the database)\r\n    \"\"\"\r\n\r\n    id: int = db.Column(db.Integer, primary_key=True)\r\n    date_posted: datetime = db.Column(\r\n        db.DateTime, nullable=False, default=datetime.utcnow\r\n    )\r\n    posted_by: int = db.Column(\r\n        db.Integer,\r\n        db.ForeignKey(\"user.id\"),\r\n        nullable=True,\r\n        default=None,\r\n    )\r\n    url: str = db.Column(db.String(100), nullable=True, default=None)\r\n    filename: str = db.Column(db.String(100), nullable=True, default=None)\r\n    filepath: str = db.Column(db.String(100), nullable=True, default=None)\r\n    thumbnail: str = db.Column(db.String(100), nullable=True, default=None)\r\n    thumbnail_path: str = db.Column(db.String(100), nullable=True, default=None)\r\n    deleted: bool = db.Column(db.Boolean, nullable=False, default=False)\r\n    private: bool = db.Column(db.Boolean, nullable=False, default=False)\r\n    group_id: int = db.Column(db.Integer, db.ForeignKey(\"group.id\"), nullable=True)\r\n    seen_by: Mapped[list] = db.relationship(\r\n        \"User\",\r\n        secondary=\"seen_memes\",\r\n        lazy=\"subquery\",\r\n        backref=db.backref(\"seen_memes\", lazy=True),\r\n    )\r\n    comments: Mapped[list] = db.relationship(\r\n        \"Comment\", backref=\"meme\", lazy=True, cascade=\"all, delete-orphan\"\r\n    )\r\n\r\n    def __init__(self, posted_by: int, filename: str, private: bool) -> None:\r\n        \"\"\"\r\n        Instantiate an object of the class.\r\n\r\n        @param posted_by: The user who posted the meme.\r\n        @param filename: The filename of the meme.\r\n        @param private: Whether the meme is private.\r\n\r\n        @return: None\r\n\r\n        \"\"\"\r\n        self.posted_by = posted_by\r\n        self.filename = filename\r\n        self.filepath = os.path.join(_upload_folder, filename)\r\n        self.thumbnail = f\"thumbnail_{filename}\"\r\n        self.thumbnail_path = os.path.join(_upload_folder, \"thumbnails\", self.thumbnail)\r\n        self.private = private\r\n        self.create_thumbnail()\r\n\r\n    def __repr__(self) -> str:\r\n        \"\"\"Return a string representation of the object.\"\"\"\r\n        return f\"Meme('{self.id}', '{self.filename}')\"\r\n\r\n    def create_thumbnail(self, size=(350, 350)) -> bool:\r\n        \"\"\"Create a thumbnail of the meme.\"\"\"\r\n        try:\r\n            img = Image.open(self.filepath)\r\n            img.thumbnail(size)\r\n            img.save(self.thumbnail_path)\r\n            return True\r\n        except Exception as err:\r\n            print(err)\r\n            return False\r\n\r\n    def check_seen_by_user(self, user_id: int) -> bool:\r\n        \"\"\"Check if a user has seen the meme.\"\"\"\r\n        return user_id in [user.id for user in self.seen_by]\r\n\r\n    def seen_by_user(self, user_id: int) -> None:\r\n        \"\"\"Add a user to the list of users who have seen the meme.\"\"\"\r\n        if not self.check_seen_by_user(user_id):\r\n            self.seen_by.append(user_id)\r\n            self.save()\r\n\r\n    def get_comments(self):\r\n        \"\"\"Return the comments on the meme.\"\"\"\r\n        return self.comments\r\n\r\n    def save(self) -> None:\r\n        \"\"\"Save the meme to the database.\"\"\"\r\n        db.session.add(self)\r\n        db.session.commit()\r\n\r\n    def delete(self) -> None:\r\n        \"\"\"Delete the meme from the database.\"\"\"\r\n        db.session.delete(self)\r\n        db.session.commit()\r\n\r\n    def get_id(self) -> int:\r\n        \"\"\"Get the id of the meme.\"\"\"\r\n        return self.id\r\n\r\n    def get_date_posted(self) -> datetime:\r\n        \"\"\"Get the date posted of the meme.\"\"\"\r\n        return self.date_posted\r\n\r\n    def get_posted_by(self) -> int:\r\n        \"\"\"Get the user who posted the meme.\"\"\"\r\n        return self.posted_by\r\n\r\n    def get_url(self) -> str:\r\n        \"\"\"Get the URL of the meme.\"\"\"\r\n        return self.url\r\n\r\n    def get_filename(self) -> str:\r\n        \"\"\"Get the filename of the meme.\"\"\"\r\n        return self.filename\r\n\r\n    def get_filepath(self) -> str:\r\n        \"\"\"Get the filepath of the meme.\"\"\"\r\n        return self.filepath\r\n\r\n    def get_thumbnail(self) -> str:\r\n        \"\"\"Get the thumbnail of the meme.\"\"\"\r\n        return self.thumbnail\r\n\r\n    def get_thumbnail_path(self) -> str:\r\n        \"\"\"Get the thumbnail path of the meme.\"\"\"\r\n        return self.thumbnail_path\r\n\r\n    def get_deleted(self) -> bool:\r\n        \"\"\"Get whether the meme is deleted.\"\"\"\r\n        return self.deleted\r\n\r\n    def get_private(self) -> bool:\r\n        \"\"\"Get whether the meme is private.\"\"\"\r\n        return self.private\r\n\r\n    def get_group_id(self) -> int:\r\n        \"\"\"Get the id of the group the meme is in.\"\"\"\r\n        return self.group_id\r\n\r\n    def get_seen_by(self) -> list:\r\n        \"\"\"Get the users who have seen the meme.\"\"\"\r\n        return self.seen_by\r\n\r\n    def update(self) -> None:\r\n        \"\"\"Update the meme in the database.\"\"\"\r\n        db.session.commit()\r\n\r\n    @classmethod\r\n    def from_url(cls, url, posted_by, private):\r\n        \"\"\"Create a meme from a URL.\"\"\"\r\n        # This method should download the image from the URL, save it to the\r\n        # upload folder, and then create a Meme object with the filename of\r\n        # the saved image.\r\n        # ...code to download image...\r\n        filename = ...  # the filename of the downloaded image\r\n        return cls(posted_by, filename, private)\r\n\r\n    @classmethod\r\n    def from_upload(cls, file, posted_by, private):\r\n        \"\"\"Create a meme from an uploaded file.\"\"\"\r\n        # This method should save the uploaded file to the upload folder,\r\n        # and then create a Meme object with the filename of the saved file.\r\n        # ...code to save uploaded file...\r\n        filename = ...  # the filename of the saved file\r\n        return cls(posted_by, filename, private)\r\n"
        },
        "tables.py": {
          "content": "from app import db\r\n\r\n# The following tables are reference tables for the many-to-many relationships\r\ngroup_members = db.Table(\r\n    \"group_members\",\r\n    db.Column(\"user_id\", db.Integer, db.ForeignKey(\"user.id\"), primary_key=True),\r\n    db.Column(\"group_id\", db.Integer, db.ForeignKey(\"group.id\"), primary_key=True),\r\n)\r\n\r\nsaved_memes = db.Table(\r\n    \"saved_memes\",\r\n    db.Column(\"user_id\", db.Integer, db.ForeignKey(\"user.id\"), primary_key=True),\r\n    db.Column(\"meme_id\", db.Integer, db.ForeignKey(\"meme.id\"), primary_key=True),\r\n)\r\n\r\nseen_memes = db.Table(\r\n    \"seen_memes\",\r\n    db.Column(\"user_id\", db.Integer, db.ForeignKey(\"user.id\"), primary_key=True),\r\n    db.Column(\"meme_id\", db.Integer, db.ForeignKey(\"meme.id\"), primary_key=True),\r\n)\r\n\r\nposted_comments = db.Table(\r\n    \"posted_comments\",\r\n    db.Column(\"user_id\", db.Integer, db.ForeignKey(\"user.id\"), primary_key=True),\r\n    db.Column(\"comment_id\", db.Integer, db.ForeignKey(\"comment.id\"), primary_key=True),\r\n)\r\n"
        },
        "user.py": {
          "content": "# filename: user.py\r\n# filepath: app\\models\\user.py\r\n\r\nfrom flask_login import UserMixin\r\nfrom werkzeug.security import generate_password_hash, check_password_hash\r\nfrom app import login_manager, db\r\nfrom sqlalchemy.orm import Mapped\r\nimport os\r\n\r\n\r\n@login_manager.user_loader\r\ndef load_user(user_id: int):\r\n    return User.query.get(int(user_id))\r\n\r\n\r\n# create the user model\r\nclass User(db.Model, UserMixin):\r\n    \"\"\"\r\n    Create a User model.\r\n\r\n    This model should have the following attributes:\r\n    - id (int, primary key)\r\n    - username (str, unique, not nullable)\r\n    - email (str, unique, not nullable)\r\n    - password (str, not nullable)\r\n    - memes (list, backref=\"posted_memes\", lazy=True)\r\n    - saved_memes (list, secondary=\"saved_memes\", lazy=\"subquery\", backref=db.backref(\"saved_by\", lazy=True))\r\n    - is_admin (bool, not nullable, default=False)\r\n\r\n    This model should have the following methods:\r\n    - __init__ (instantiate an object of the class)\r\n    - __repr__ (return a string representation of the object)\r\n    - set_password (set the password of the user)\r\n    - check_password (check if the password is correct)\r\n    - forgot_password (set a temporary password for the user)\r\n    - save (save the user to the database)\r\n    - delete (delete the user from the database)\r\n    - is_admin (check if the user is an admin)\r\n    - set_admin (set the user as an admin)\r\n    - admin_login (check if the user is an admin and the password is correct)\r\n    - _set_temp_password (set a temporary password for the user)\r\n    \"\"\"\r\n\r\n    id: int = db.Column(db.Integer, primary_key=True)\r\n    username: str = db.Column(db.String(20), unique=True, nullable=False)\r\n    email: str = db.Column(db.String(120), unique=True, nullable=False)\r\n    password: str = db.Column(db.String(120), nullable=False)\r\n    memes: Mapped[list] = db.relationship(\"Meme\", backref=\"posted_memes\", lazy=True)\r\n    saved_memes: Mapped[list] = db.relationship(\r\n        \"Meme\",\r\n        secondary=\"saved_memes\",\r\n        lazy=\"subquery\",\r\n        backref=db.backref(\"saved_by\", lazy=True),\r\n    )\r\n    is_admin: bool = db.Column(db.Boolean, nullable=False, default=False)\r\n    comments: Mapped[list] = db.relationship(\r\n        \"Comment\", backref=\"posted_comments\", lazy=True\r\n    )\r\n\r\n    def __init__(self, username: str, email: str, password: str) -> None:\r\n        \"\"\"\r\n        Instantiate an object of the class.\r\n\r\n        @param username: The username of the user.\r\n        @param email: The email of the user.\r\n        @param password: The password of the user.\r\n        @return: None\r\n        \"\"\"\r\n        self.username = username\r\n        self.email = email\r\n        self.password = generate_password_hash(password)\r\n\r\n    def __repr__(self) -> str:\r\n        \"\"\"Return a string representation of the object.\"\"\"\r\n        return f\"User('{self.id}', '{self.username}')\"\r\n\r\n    def set_password(self, password: str) -> None:\r\n        \"\"\"Set the password of the user.\r\n        @param password: The password of the user.\r\n        @return: None\r\n        \"\"\"\r\n        self.password = generate_password_hash(password)\r\n\r\n    def check_password(self, password: str) -> bool:\r\n        \"\"\"\r\n        Check if the password is correct.\r\n        @param password: The password of the user.\r\n        @return: True if the password is correct, False otherwise.\r\n        \"\"\"\r\n        return check_password_hash(self.password, password)\r\n\r\n    def forgot_password(self, new_password: str, temp: str) -> None:\r\n        \"\"\"\r\n        Set a temporary password for the user.\r\n        @param new_password: The new password of the user.\r\n        @param temp: The temporary password of the user.\r\n        @return: None\r\n        \"\"\"\r\n        if temp == self.password:\r\n            self.set_password(new_password)\r\n            db.session.commit()\r\n\r\n    def _set_temp_password(self) -> None:\r\n        \"\"\"\r\n        Set a temporary password for the user.\r\n        @return: None\r\n        \"\"\"\r\n        import random\r\n        import string\r\n\r\n        temp = \"\".join(random.choices(string.ascii_letters + string.digits, k=8))\r\n        self.set_password(temp)\r\n        # send the temp password to the user's email\r\n        db.session.commit()\r\n\r\n    def save(self) -> None:\r\n        \"\"\"\r\n        Save the user to the database.\r\n        @return: None\r\n        \"\"\"\r\n        db.session.add(self)\r\n        db.session.commit()\r\n\r\n    def delete(self) -> None:\r\n        \"\"\"\r\n        Delete the user from the database.\r\n        @return: None\r\n        \"\"\"\r\n        db.session.delete(self)\r\n        db.session.commit()\r\n\r\n    def is_admin(self) -> bool:\r\n        \"\"\"\r\n        Check if the user is an admin.\r\n        @return: True if the user is an admin, False otherwise.\r\n        \"\"\"\r\n        return self.is_admin\r\n\r\n    def set_admin(self, is_admin: bool) -> None:\r\n        \"\"\"\r\n        Set the user as an admin.\r\n        @param is_admin: Whether the user is an admin.\r\n        @return: None\r\n        \"\"\"\r\n        self.is_admin = is_admin\r\n        db.session.commit()\r\n\r\n    def admin_login(self, password: str) -> bool:\r\n        \"\"\"\r\n        Check if the user is an admin and the password is correct.\r\n        @param password: The password of the user.\r\n        @return: True if the user is an admin and the password is correct, False otherwise.\r\n        \"\"\"\r\n        return (\r\n            check_password_hash(os.getenv(\"ADMIN_PASSWORD\"), password) and self.is_admin\r\n        )\r\n"
        },
        "__init__.py": {
          "content": "# Import all models from app\\models\\__init__.py\r\n# filename: app\\models\\__init__.py\r\n\r\nfrom .user import User as User\r\nfrom .meme import Meme as Meme\r\nfrom .group import Group as Group\r\nfrom .comment import Comment as Comment\r\nfrom .tables import (\r\n    group_members as group_members,\r\n    saved_memes as saved_memes,\r\n    seen_memes as seen_memes,\r\n    posted_comments as posted_comments,\r\n)\r\n"
        },
        "__pycache__": {
          "content": "ignored"
        }
      },
      "routes": {
        "auth.py": {
          "content": "from flask import render_template, redirect, url_for, flash, Response\r\nfrom flask_login import current_user, login_user, logout_user\r\nfrom app.models import User\r\nfrom app.forms import LoginForm, RegistrationForm\r\nfrom . import endpoint\r\n\r\n__all__ = [\r\n    \"login\",\r\n    \"logout\",\r\n    \"register\",\r\n]\r\n\r\n\r\n@endpoint.route(\"/login\", methods=[\"GET\", \"POST\"])\r\ndef login():\r\n    if current_user.is_authenticated:\r\n        return redirect(url_for(\"routes.index_page\"))\r\n    form = LoginForm()\r\n    if form.validate_on_submit():\r\n        user = User.query.filter_by(username=form.username.data).first()\r\n        if user is None or not user.check_password(form.password.data):\r\n            flash(\"Invalid username or password\")\r\n            return redirect(url_for(\"routes.login\"))\r\n        login_user(user, remember=form.remember_me.data)\r\n        return redirect(url_for(\"routes.index_page\"))\r\n    return render_template(\"login.html\", title=\"Sign In\", form=form)\r\n\r\n\r\n@endpoint.route(\"/logout\")\r\ndef logout() -> Response:\r\n    logout_user()\r\n    return redirect(url_for(\"routes.index_page\"))\r\n\r\n\r\n@endpoint.route(\"/register\", methods=[\"GET\", \"POST\"])\r\ndef register():\r\n    if current_user.is_authenticated:\r\n        return redirect(url_for(\"routes.index_page\"))\r\n    form = RegistrationForm()\r\n    if form.validate_on_submit():\r\n        user = User(\r\n            username=form.username.data,\r\n            email=form.email.data,\r\n            password=form.password.data,\r\n        )\r\n        user.save()\r\n        flash(f\"New user {form.username.data} has been created!\")\r\n        return redirect(url_for(\"routes.login\"))\r\n    return render_template(\"new_user.html\", title=\"Register\", form=form)\r\n"
        },
        "index.py": {
          "content": "from flask import redirect, url_for, render_template\r\nfrom flask_login import current_user\r\nfrom . import endpoint\r\nimport os\r\n\r\n\r\n@endpoint.route(\"/\")\r\n@endpoint.route(\"/index\", methods=[\"GET\"])\r\ndef index_page():\r\n    if not current_user.is_authenticated and os.environ.get(\"ENV_MODE\") != \"dev\":\r\n        return redirect(url_for(\"routes.login\"))\r\n    else:\r\n        user_id = None\r\n    return render_template(\r\n        \"index.html\",\r\n        user_id=user_id,\r\n        title=\"Intragram\",\r\n    )\r\n"
        },
        "meme.py": {
          "content": "from flask import render_template, redirect, url_for, flash, Response, request\r\nfrom flask_login import current_user, login_required\r\nfrom app import db\r\nfrom app.models import Meme, User\r\nfrom . import endpoint\r\n\r\n\r\n@endpoint.route(\"/meme/<page:int>\", methods=[\"GET\"])\r\n@login_required\r\ndef get_memes(page):\r\n    memes = Meme.query.paginate(page=page, per_page=10)\r\n    return render_template(\"meme.html\", memes=memes)\r\n\r\n\r\n@endpoint.route(\"/meme/upload\", methods=[\"GET\"])\r\n@login_required\r\ndef upload_meme():\r\n    # form = UploadMemeForm()\r\n    ...\r\n"
        },
        "user.py": {
          "content": "from flask import render_template, redirect, url_for, flash, Response, request\r\nfrom flask_login import current_user, login_required\r\nfrom app import db\r\nfrom . import endpoint\r\nfrom app.models import User, Group, Meme\r\nfrom app.forms import AdminLoginForm, RegistrationForm\r\n\r\n\r\n@endpoint.route(\"/user\", methods=[\"GET\"])\r\n@login_required\r\ndef user():\r\n    return render_template(\"user_page.html\")\r\n\r\n\r\n@endpoint.route(\"/user/<int:id>\", methods=[\"GET\"])\r\n@login_required\r\ndef user_id(id):\r\n    user = User.query.get_or_404(id)\r\n    return render_template(\"user.html\", user=user)\r\n\r\n\r\n@endpoint.route(\"/user/new\", methods=[\"POST\"])\r\ndef new_user():\r\n    form = RegistrationForm()\r\n    if form.validate_on_submit():\r\n        user = User(username=form.username.data, email=form.email.data)\r\n        user.set_password(form.password.data)\r\n        db.session.add(user)\r\n        db.session.commit()\r\n        flash(\"Congratulations, you are now a registered user!\")\r\n        return redirect(url_for(\"endpoint.login\"))\r\n    return redirect(url_for(\"endpoint.login\"))\r\n\r\n\r\n@endpoint.route(\"/user/<int:id>/edit\", methods=[\"GET\", \"POST\"])\r\n@login_required\r\ndef edit_user(id):\r\n    if current_user.id == id:\r\n        user = User.query.get_or_404(id)\r\n        form = RegistrationForm()\r\n        if form.validate_on_submit():\r\n            user.username = form.username.data\r\n            user.email = form.email.data\r\n            user.set_password(form.password.data)\r\n            db.session.commit()\r\n            flash(\"Your changes have been saved.\")\r\n            return redirect(url_for(\"endpoint.user\", id=user.id))\r\n        elif request.method == \"GET\":\r\n            form.username.data = user.username\r\n            form.email.data = user.email\r\n        return render_template(\"edit_user.html\", form=form)\r\n    else:\r\n        flash(\"You are not authorized to edit this user.\")\r\n        return redirect(url_for(\"endpoint.index\"))\r\n\r\n\r\n@endpoint.route(\"/user/<int:id>/delete\", methods=[\"POST\"])\r\n@login_required\r\ndef delete_user(id):\r\n    form = AdminLoginForm()\r\n    if form.validate_on_submit():\r\n        User.admin_login(form.password.data)\r\n        flash(\"You have successfully logged in as an admin.\")\r\n        user = User.query.get_or_404(id)\r\n        db.session.delete(user)\r\n        db.session.commit()\r\n        flash(\"User has been deleted.\")\r\n        return redirect(url_for(\"endpoint.index\"))\r\n    elif current_user.id == id:\r\n        user = User.query.get_or_404(id)\r\n        db.session.delete(user)\r\n        db.session.commit()\r\n        flash(\"User has been deleted.\")\r\n        return redirect(url_for(\"endpoint.logout\"))\r\n    else:\r\n        flash(\"You are not authorized to delete this user.\")\r\n    return redirect(url_for(\"endpoint.index\"))\r\n"
        },
        "__init__.py": {
          "content": "from flask import Blueprint\r\nfrom flask_wtf import FlaskForm\r\n\r\n# from app.forms import (\r\n#     FileUploadForm,\r\n#     BookmarkForm,\r\n#     EditFileForm,\r\n# )\r\n\r\nendpoint = Blueprint(\"routes\", __name__)\r\n\r\n# # Inject forms into all templates\r\n# @endpoint.context_processor\r\n# def inject_forms() -> dict:\r\n#     upload_form: FlaskForm = FileUploadForm()\r\n#     bookmark_form: FlaskForm = BookmarkForm()\r\n#     edit_file_form: FlaskForm = EditFileForm()\r\n#     return dict(\r\n#         upload_form=upload_form,\r\n#         bookmark_form=bookmark_form,\r\n#         edit_file_form=edit_file_form,\r\n#     )\r\n\r\nfrom .index import index_page as index_page\r\nfrom .auth import login as login, logout as logout, register as register\r\n"
        },
        "__pycache__": {
          "content": "ignored"
        }
      },
      "scripts": {
        "test_memes.py": {
          "content": "# from app import app\r\nfrom app.models import Meme\r\nimport os\r\n\r\ndef generate_test_memes():\r\n    memes_dir = os.path.join( os.path.dirname(os.path.dirname(__file__)), 'static', 'images', 'test_memes' )\r\n    for meme in os.listdir(memes_dir):\r\n        if meme.endswith('.jpg'):\r\n            meme_path = os.path.join(memes_dir, meme)\r\n            print(meme_path)\r\n            check_meme = Meme.query.filter_by(filename=meme).first()\r\n            print(check_meme)\r\n            # Meme.create(meme_path)\r\n\r\ngenerate_test_memes()\r\n"
        },
        "__init__.py": {
          "content": "from .test_memes import generate_test_memes as generate_test_memes\r\n"
        },
        "__pycache__": {
          "content": "ignored"
        }
      },
      "static": {
        "css": {
          "output.css": {
            "content": "/*\n! tailwindcss v3.3.3 | MIT License | https://tailwindcss.com\n*/\n\n/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box;\n  /* 1 */\n  border-width: 0;\n  /* 2 */\n  border-style: solid;\n  /* 2 */\n  border-color: #e5e7eb;\n  /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n*/\n\nhtml {\n  line-height: 1.5;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n  -moz-tab-size: 4;\n  /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4;\n  /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  /* 4 */\n  font-feature-settings: normal;\n  /* 5 */\n  font-variation-settings: normal;\n  /* 6 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0;\n  /* 1 */\n  line-height: inherit;\n  /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  border-top-width: 1px;\n  /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0;\n  /* 1 */\n  border-color: inherit;\n  /* 2 */\n  border-collapse: collapse;\n  /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-feature-settings: inherit;\n  /* 1 */\n  font-variation-settings: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  font-weight: inherit;\n  /* 1 */\n  line-height: inherit;\n  /* 1 */\n  color: inherit;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n  padding: 0;\n  /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button;\n  /* 1 */\n  background-color: transparent;\n  /* 2 */\n  background-image: none;\n  /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nReset default styling for dialogs.\n*/\n\ndialog {\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  /* 1 */\n  vertical-align: middle;\n  /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n\n[hidden] {\n  display: none;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n.container {\n  width: 100%;\n}\n\n@media (min-width: 640px) {\n  .container {\n    max-width: 640px;\n  }\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 768px;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1024px;\n  }\n}\n\n@media (min-width: 1280px) {\n  .container {\n    max-width: 1280px;\n  }\n}\n\n@media (min-width: 1536px) {\n  .container {\n    max-width: 1536px;\n  }\n}\n\n.visible {\n  visibility: visible;\n}\n\n.collapse {\n  visibility: collapse;\n}\n\n.static {\n  position: static;\n}\n\n.relative {\n  position: relative;\n}\n\n.top-2 {\n  top: 0.5rem;\n}\n\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.mx-1 {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n\n.my-2 {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n\n.mx-6 {\n  margin-left: 1.5rem;\n  margin-right: 1.5rem;\n}\n\n.my-1 {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n\n.mb-1 {\n  margin-bottom: 0.25rem;\n}\n\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\n\n.mb-3 {\n  margin-bottom: 0.75rem;\n}\n\n.mb-4 {\n  margin-bottom: 1rem;\n}\n\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\n\n.ml-2 {\n  margin-left: 0.5rem;\n}\n\n.mr-1 {\n  margin-right: 0.25rem;\n}\n\n.mr-2 {\n  margin-right: 0.5rem;\n}\n\n.mr-3 {\n  margin-right: 0.75rem;\n}\n\n.mt-0 {\n  margin-top: 0px;\n}\n\n.mt-1 {\n  margin-top: 0.25rem;\n}\n\n.mt-2 {\n  margin-top: 0.5rem;\n}\n\n.mt-3 {\n  margin-top: 0.75rem;\n}\n\n.mt-4 {\n  margin-top: 1rem;\n}\n\n.mt-6 {\n  margin-top: 1.5rem;\n}\n\n.mt-8 {\n  margin-top: 2rem;\n}\n\n.ml-4 {\n  margin-left: 1rem;\n}\n\n.ml-3 {\n  margin-left: 0.75rem;\n}\n\n.block {\n  display: block;\n}\n\n.inline-block {\n  display: inline-block;\n}\n\n.inline {\n  display: inline;\n}\n\n.flex {\n  display: flex;\n}\n\n.table {\n  display: table;\n}\n\n.contents {\n  display: contents;\n}\n\n.hidden {\n  display: none;\n}\n\n.h-1 {\n  height: 0.25rem;\n}\n\n.h-16 {\n  height: 4rem;\n}\n\n.h-3 {\n  height: 0.75rem;\n}\n\n.h-auto {\n  height: auto;\n}\n\n.h-full {\n  height: 100%;\n}\n\n.h-px {\n  height: 1px;\n}\n\n.h-screen {\n  height: 100vh;\n}\n\n.h-3\\/4 {\n  height: 75%;\n}\n\n.max-h-fit {\n  max-height: -moz-fit-content;\n  max-height: fit-content;\n}\n\n.min-h-screen {\n  min-height: 100vh;\n}\n\n.min-h-full {\n  min-height: 100%;\n}\n\n.w-1 {\n  width: 0.25rem;\n}\n\n.w-16 {\n  width: 4rem;\n}\n\n.w-2 {\n  width: 0.5rem;\n}\n\n.w-64 {\n  width: 16rem;\n}\n\n.w-80 {\n  width: 20rem;\n}\n\n.w-auto {\n  width: auto;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.w-screen {\n  width: 100vw;\n}\n\n.w-1\\/2 {\n  width: 50%;\n}\n\n.max-w-fit {\n  max-width: -moz-fit-content;\n  max-width: fit-content;\n}\n\n.max-w-md {\n  max-width: 28rem;\n}\n\n.max-w-screen-md {\n  max-width: 768px;\n}\n\n.max-w-lg {\n  max-width: 32rem;\n}\n\n.max-w-2xl {\n  max-width: 42rem;\n}\n\n.flex-1 {\n  flex: 1 1 0%;\n}\n\n.flex-none {\n  flex: none;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.border-collapse {\n  border-collapse: collapse;\n}\n\n.border-spacing-7 {\n  --tw-border-spacing-x: 1.75rem;\n  --tw-border-spacing-y: 1.75rem;\n  border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y);\n}\n\n.transform {\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n\n.resize {\n  resize: both;\n}\n\n.flex-row {\n  flex-direction: row;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.content-center {\n  align-content: center;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-start {\n  justify-content: flex-start;\n}\n\n.justify-end {\n  justify-content: flex-end;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.justify-evenly {\n  justify-content: space-evenly;\n}\n\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n\n.overflow-hidden {\n  overflow: hidden;\n}\n\n.rounded {\n  border-radius: 0.25rem;\n}\n\n.rounded-full {\n  border-radius: 9999px;\n}\n\n.rounded-md {\n  border-radius: 0.375rem;\n}\n\n.border {\n  border-width: 1px;\n}\n\n.border-black {\n  --tw-border-opacity: 1;\n  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n}\n\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n\n.border-gray-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(156 163 175 / var(--tw-border-opacity));\n}\n\n.border-gray-800 {\n  --tw-border-opacity: 1;\n  border-color: rgb(31 41 55 / var(--tw-border-opacity));\n}\n\n.border-gray-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\n\n.bg-blue-300 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(147 197 253 / var(--tw-bg-opacity));\n}\n\n.bg-blue-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n}\n\n.bg-blue-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(37 99 235 / var(--tw-bg-opacity));\n}\n\n.bg-cyan-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(14 116 144 / var(--tw-bg-opacity));\n}\n\n.bg-gray-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\n\n.bg-gray-300 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(209 213 219 / var(--tw-bg-opacity));\n}\n\n.bg-gray-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(156 163 175 / var(--tw-bg-opacity));\n}\n\n.bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n\n.bg-gray-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n\n.bg-gray-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\n\n.bg-gray-900 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\n\n.bg-green-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n}\n\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n.bg-gray-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n\n.bg-black {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\n\n.bg-blue-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(219 234 254 / var(--tw-bg-opacity));\n}\n\n.p-2 {\n  padding: 0.5rem;\n}\n\n.p-3 {\n  padding: 0.75rem;\n}\n\n.p-4 {\n  padding: 1rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n\n.py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n\n.py-40 {\n  padding-top: 10rem;\n  padding-bottom: 10rem;\n}\n\n.py-6 {\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n}\n\n.py-8 {\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n}\n\n.py-0 {\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n\n.px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.pl-2 {\n  padding-left: 0.5rem;\n}\n\n.pr-2 {\n  padding-right: 0.5rem;\n}\n\n.pt-2 {\n  padding-top: 0.5rem;\n}\n\n.pt-4 {\n  padding-top: 1rem;\n}\n\n.pb-1 {\n  padding-bottom: 0.25rem;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.font-billabong {\n  font-family: billabong;\n}\n\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n\n.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\n\n.text-5xl {\n  font-size: 3rem;\n  line-height: 1;\n}\n\n.text-6xl {\n  font-size: 3.75rem;\n  line-height: 1;\n}\n\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.font-extrabold {\n  font-weight: 800;\n}\n\n.font-medium {\n  font-weight: 500;\n}\n\n.font-semibold {\n  font-weight: 600;\n}\n\n.uppercase {\n  text-transform: uppercase;\n}\n\n.text-black {\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\n\n.text-blue-400 {\n  --tw-text-opacity: 1;\n  color: rgb(96 165 250 / var(--tw-text-opacity));\n}\n\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\n\n.text-blue-600 {\n  --tw-text-opacity: 1;\n  color: rgb(37 99 235 / var(--tw-text-opacity));\n}\n\n.text-gray-100 {\n  --tw-text-opacity: 1;\n  color: rgb(243 244 246 / var(--tw-text-opacity));\n}\n\n.text-gray-300 {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\n\n.text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n.text-gray-200 {\n  --tw-text-opacity: 1;\n  color: rgb(229 231 235 / var(--tw-text-opacity));\n}\n\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n\n.underline {\n  text-decoration-line: underline;\n}\n\n.no-underline {\n  text-decoration-line: none;\n}\n\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.outline {\n  outline-style: solid;\n}\n\n@font-face {\n  font-family: 'billabong';\n\n  src: url('../fonts/billabong.ttf');\n}\n\n.hover\\:cursor-pointer:hover {\n  cursor: pointer;\n}\n\n.hover\\:text-blue-800:hover {\n  --tw-text-opacity: 1;\n  color: rgb(30 64 175 / var(--tw-text-opacity));\n}\n\n.hover\\:text-gray-200:hover {\n  --tw-text-opacity: 1;\n  color: rgb(229 231 235 / var(--tw-text-opacity));\n}\n\n.hover\\:text-gray-300:hover {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\n\n.hover\\:text-gray-600:hover {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n\n.hover\\:text-gray-800:hover {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\n\n.hover\\:text-white:hover {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n.hover\\:text-gray-400:hover {\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n\n.hover\\:no-underline:hover {\n  text-decoration-line: none;\n}\n\n.focus\\:border-gray-400:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(156 163 175 / var(--tw-border-opacity));\n}\n\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n.active\\:outline-none:active {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n@media (prefers-color-scheme: dark) {\n  .dark\\:block {\n    display: block;\n  }\n\n  .dark\\:hidden {\n    display: none;\n  }\n\n  .dark\\:border-black {\n    --tw-border-opacity: 1;\n    border-color: rgb(0 0 0 / var(--tw-border-opacity));\n  }\n\n  .dark\\:border-gray-600 {\n    --tw-border-opacity: 1;\n    border-color: rgb(75 85 99 / var(--tw-border-opacity));\n  }\n\n  .dark\\:bg-gray-400 {\n    --tw-bg-opacity: 1;\n    background-color: rgb(156 163 175 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:bg-gray-600 {\n    --tw-bg-opacity: 1;\n    background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:bg-gray-700 {\n    --tw-bg-opacity: 1;\n    background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:bg-gray-800 {\n    --tw-bg-opacity: 1;\n    background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:bg-gray-500 {\n    --tw-bg-opacity: 1;\n    background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:bg-black {\n    --tw-bg-opacity: 1;\n    background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:text-blue-400 {\n    --tw-text-opacity: 1;\n    color: rgb(96 165 250 / var(--tw-text-opacity));\n  }\n\n  .dark\\:text-gray-100 {\n    --tw-text-opacity: 1;\n    color: rgb(243 244 246 / var(--tw-text-opacity));\n  }\n\n  .dark\\:text-gray-300 {\n    --tw-text-opacity: 1;\n    color: rgb(209 213 219 / var(--tw-text-opacity));\n  }\n\n  .dark\\:text-white {\n    --tw-text-opacity: 1;\n    color: rgb(255 255 255 / var(--tw-text-opacity));\n  }\n\n  .dark\\:text-gray-200 {\n    --tw-text-opacity: 1;\n    color: rgb(229 231 235 / var(--tw-text-opacity));\n  }\n\n  .dark\\:text-black {\n    --tw-text-opacity: 1;\n    color: rgb(0 0 0 / var(--tw-text-opacity));\n  }\n\n  .dark\\:text-gray-700 {\n    --tw-text-opacity: 1;\n    color: rgb(55 65 81 / var(--tw-text-opacity));\n  }\n\n  .dark\\:text-gray-900 {\n    --tw-text-opacity: 1;\n    color: rgb(17 24 39 / var(--tw-text-opacity));\n  }\n\n  .dark\\:hover\\:text-blue-600:hover {\n    --tw-text-opacity: 1;\n    color: rgb(37 99 235 / var(--tw-text-opacity));\n  }\n\n  .dark\\:hover\\:text-gray-400:hover {\n    --tw-text-opacity: 1;\n    color: rgb(156 163 175 / var(--tw-text-opacity));\n  }\n}\n\n@media (min-width: 768px) {\n  .md\\:flex {\n    display: flex;\n  }\n\n  .md\\:w-1\\/2 {\n    width: 50%;\n  }\n\n  .md\\:max-w-md {\n    max-width: 28rem;\n  }\n\n  .md\\:flex-none {\n    flex: none;\n  }\n\n  .md\\:justify-start {\n    justify-content: flex-start;\n  }\n\n  .md\\:justify-end {\n    justify-content: flex-end;\n  }\n}\n\n@media (min-width: 1024px) {\n  .lg\\:max-w-lg {\n    max-width: 32rem;\n  }\n}\r\n"
          },
          "styles.css": {
            "content": "@import 'tailwindcss/base';\r\n@import 'tailwindcss/components';\r\n@import 'tailwindcss/utilities';\r\n\r\n@font-face {\r\n    font-family: 'billabong';\r\n    src: url('../fonts/billabong.ttf');\r\n}\r\n\r\n@import 'fontawesome-free/css/all.css';\r\n"
          }
        },
        "fonts": {
          "Billabong.ttf": {
            "content": "ignored"
          }
        },
        "images": {
          "intragram_logo_darkmode.png": {
            "content": "ignored"
          },
          "intragram_logo_lightmode.png": {
            "content": "ignored"
          },
          "small_intragram_logo_darkmode.png": {
            "content": "ignored"
          },
          "small_intragram_logo_lightmode.png": {
            "content": "ignored"
          },
          "test_memes": {
            "meme0.jpg": {
              "content": "ignored"
            },
            "meme1.jpg": {
              "content": "ignored"
            },
            "meme11.jpg": {
              "content": "ignored"
            },
            "meme12.jpg": {
              "content": "ignored"
            },
            "meme13.jpg": {
              "content": "ignored"
            },
            "meme2.jpg": {
              "content": "ignored"
            },
            "meme3.jpg": {
              "content": "ignored"
            },
            "meme4.jpg": {
              "content": "ignored"
            },
            "meme5.jpg": {
              "content": "ignored"
            },
            "meme6.jpg": {
              "content": "ignored"
            },
            "meme7.jpg": {
              "content": "ignored"
            },
            "meme8.jpg": {
              "content": "ignored"
            },
            "meme9.jpg": {
              "content": "ignored"
            }
          }
        },
        "js": {},
        "uploads": {
          "thumbnails": {}
        }
      },
      "templates": {
        "base.html": {
          "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>{{ title }}</title>\r\n    <link class=\"\" href=\"{{url_for('static', filename='css/output.css')}}\" rel=\"stylesheet\">\r\n    <link class=\"\" href=\"../static/css/output.css\" rel=\"stylesheet\">\r\n    <script src=\"https://kit.fontawesome.com/03efbea893.js\" crossorigin=\"anonymous\"></script>\r\n    <!-- Site Icon -->\r\n    <link rel=\"icon\" type=\"image/png\" href=\"{{ url_for('static', filename='images/intragram_logo_darkmode.png') }}\"\r\n        class=\"dark:hidden\">\r\n</head>\r\n\r\n<body class=\"dark:bg-black bg-white text-gray-900 dark:text-gray-100\">\r\n    <nav class=\"bg-white dark:bg-gray-600 p-2 mt-0 w-full\">\r\n        <!-- This is the main heading -->\r\n        <div class=\"container mx-auto flex flex-wrap items-center\">\r\n            <div class=\"flex w-full md:w-1/2 justify-center md:justify-start text-black dark:text-white\">\r\n                <a class=\"flex items-center text-grey-600 dark:text-white no-underline hover:text-white hover:no-underline\"\r\n                    href=\"{{ url_for('routes.index_page') }}\">\r\n                    <img id=\"navbar-logo-light\" class=\"dark:hidden\"\r\n                        src=\"{{ url_for('static', filename='images/intragram_logo_lightmode.png') }}\" height=\"38\"\r\n                        width=\"38\" alt=\"Site Icon\" class=\"mr-2 mb-1\">\r\n                    <img id=\"navbar-logo-dark\" class=\"hidden dark:block\"\r\n                        src=\"{{ url_for('static', filename='images/intragram_logo_darkmode.png') }}\" height=\"38\"\r\n                        width=\"38\" alt=\"Site Icon\" class=\"mr-2 mb-1\">\r\n                    <span class=\"text-4xl font-billabong\">&nbsp;&nbsp;Intragram</span>\r\n                </a>\r\n            </div>\r\n            <div class=\"flex w-full pt-2 content-center justify-between md:w-1/2 md:justify-end\">\r\n                <ul class=\"list-reset flex justify-between flex-1 md:flex-none items-center\">\r\n                    <!-- Check if user is authenticated -->\r\n                    {% if current_user.is_authenticated %}\r\n                    <li class=\"mr-3\">\r\n                        <a class=\"inline-block text-grey-600 dark:text-white no-underline hover:text-gray-300 hover:text-underline py-2 px-4\"\r\n                            href=\"#\">Profile</a>\r\n                    </li>\r\n                    <li class=\"mr-3\">\r\n                        <a class=\"inline-block text-grey-600 dark:text-white no-underline hover:text-gray-200 hover:text-underline py-2 px-4\"\r\n                            href=\"{{url_for('routes.logout')}}\">Logout</a>\r\n                    </li>\r\n                    {% else %}\r\n                    <li class=\"mr-3\">\r\n                        <a class=\"inline-block text-grey-600 dark:text-white no-underline hover:text-gray-200 hover:text-underline py-2 px-4\"\r\n                            class=\"nav-link\" href=\"{{ url_for('routes.login') }}\">Sign In</a>\r\n                    </li>\r\n                    {% endif %}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n    <!-- Main Content -->\r\n    {% block content %}{% endblock %}\r\n</body>\r\n\r\n</html>\r\n"
        },
        "index.html": {
          "content": "{% extends 'base.html' %}\r\n{% block content %}\r\n<!-- <div class=\"md:flex\">\r\n    <div class=\"w-full\">\r\n        <div class=\"flex justify-between items-center p-3\">\r\n            <div class=\"flex flex-row items-center\">\r\n                <textarea name=\"comment\" id=\"comment\"\r\n                    class=\" dark:bg-gray-600 rounded-md border-1-black bg-white text-black dark:text-gray-300\"\r\n                    placeholder=\"...\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div> -->\r\n{% include 'meme_list.html' %}\r\n{% endblock %}\r\n"
        },
        "login.html": {
          "content": "{% extends \"base.html\" %}\r\n{% block content %}\r\n<div class=\"h-auto py-4 w-auto bg-white dark:bg-black flex flex-col justify-center items-center\">\r\n    <div\r\n        class=\"bg-white dark:bg-black border rounded border-gray-300 dark:border-gray-600 w-80 py-6 flex items-center flex-col mb-3 mt-3\">\r\n        <h1 class=\"text-6xl font-billabong text-black dark:text-white mb-2\">{{ title }}</h1>\r\n        <form class=\"mt-8 w-auto flex flex-col\" action=\"{{ url_for('routes.login') }}\" method=\"POST\">\r\n            {{ form.hidden_tag() }}\r\n\r\n            {{ form.username(class=\"text-xs w-full mb-2 rounded border bg-white dark:bg-gray-700 border-gray-300\r\n            dark:border-black px-2 py-2\r\n            focus:outline-none\r\n            focus:border-gray-400 active:outline-none text-black dark:text-gray-300\", placeholder=\"Username\") }}\r\n\r\n            {{ form.password(class=\"text-xs w-full mb-3 rounded border bg-white dark:bg-gray-700 border-gray-300\r\n            dark:border-black px-2 py-2\r\n            focus:outline-none\r\n            focus:border-gray-400 active:outline-none text-black dark:text-gray-300\", placeholder=\"Password\") }}\r\n\r\n            <div class=\"flex items-center mb-3 text\">\r\n                <div class=\"flex items-center justify-center ml-4\">\r\n                    {{ form.remember_me() }}\r\n                    <label for=\"{{ form.remember_me.id }}\" class=\"ml-3\">Remember Me</label>\r\n                </div>\r\n            </div>\r\n\r\n            {{ form.submit(class=\"text-sm text-center bg-blue-300 dark:bg-gray-400 text-white dark:text-gray-900 py-1\r\n            rounded font-medium\",\r\n            value=\"Sign In\")\r\n            }}\r\n\r\n        </form>\r\n    </div>\r\n    <div class=\"bg-white dark:bg-black border border-gray-300 dark:border-gray-600 text-center w-80 py-4 mb-6\">\r\n        <span class=\"text-sm text-black dark:text-white\">Don't have an account?</span>\r\n        <a href=\"{{ url_for('routes.register') }}\" class=\"text-blue-500 dark:text-blue-400 text-sm font-semibold\">Sign\r\n            up</a>\r\n    </div>\r\n</div>\r\n{% endblock %}\r\n"
        },
        "meme_card.html": {
          "content": "<li>\r\n    <div class=\"h-auto px-2 py-1 mt-1\">\r\n        <div\r\n            class=\"max-w-2xl lg:max-w-lg mx-auto bg-white dark:bg-black shadow-lg rounded-md overflow-hidden md:max-w-md\">\r\n            <div class=\"md:flex\">\r\n                <div class=\"w-full\">\r\n                    <div class=\"flex justify-between items-center p-3\">\r\n                        <div class=\"flex flex-row items-center\">\r\n                            <img src=\"https://picsum.photos/400\" class=\"rounded-full\" width=\"40\">\r\n                            <div class=\"flex flex-row items-center ml-2\">\r\n                                <a href=\"#\"><span class=\"font-bold mr-1 text-black dark:text-white\">User\r\n                                        Name</span></a>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"pr-2\">\r\n                            <i\r\n                                class=\"fa fa-ellipsis-h text-gray-400 hover:text-gray-600 dark:text-white hover:cursor-pointer dark:hover:text-gray-400\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <a href=\"#\">\r\n                            <img src=\"https://picsum.photos/400\" class=\"w-auto h-75\">\r\n                        </a>\r\n                    </div>\r\n                    <div class=\"p-4 flex justify-between items-center\">\r\n                        <div class=\"flex flex-row items-center\">\r\n                            {% if current_user.is_authenticated %}\r\n                            <i\r\n                                class=\"fas fa-heart mr-3 text-gray-400 hover:text-gray-600 dark:text-white hover:cursor-pointer dark:hover:text-gray-400\"></i>\r\n                            {% else %}\r\n                            <i\r\n                                class=\"far fa-heart mr-3 text-gray-400 hover:text-gray-600 dark:text-white hover:cursor-pointer dark:hover:text-gray-400\"></i>\r\n                            {% endif %}\r\n                            <i\r\n                                class=\"far fa-comment mr-3 text-gray-400 hover:text-gray-600 dark:text-white hover:cursor-pointer dark:hover:text-gray-400\"></i>\r\n                            <i\r\n                                class=\"far fa-paper-plane mr-3 text-gray-400 hover:text-gray-600 dark:text-white hover:cursor-pointer dark:hover:text-gray-400\"></i>\r\n                        </div>\r\n                        <div>\r\n                            {% if current_user.is_authenticated %}\r\n                            <i\r\n                                class=\"fas fa-bookmark text-gray-400 hover:text-gray-600 dark:text-white hover:cursor-pointer dark:hover:text-gray-400\"></i>\r\n                            {% else %}\r\n                            <i\r\n                                class=\"far fa-bookmark text-gray-400 hover:text-gray-600 dark:text-white hover:cursor-pointer dark:hover:text-gray-400\"></i>\r\n                            {% endif %}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</li>\r\n"
        },
        "meme_list.html": {
          "content": "<ul class=\"flex justify-between items-center flex-col py-3 mb-3 mt-3 bg-white dark:bg-black\">\r\n    {% for meme in range(5) %}\r\n    {% include 'meme_card.html' %}\r\n    {% endfor %}\r\n</ul>\r\n"
        },
        "new_user.html": {
          "content": "{% extends \"base.html\" %}\r\n{% block content %}\r\n<div class=\"h-auto py-4 w-auto bg-white dark:bg-black flex flex-col justify-center items-center\">\r\n    <div\r\n        class=\"bg-white dark:bg-black border rounded border-gray-300 dark:border-gray-600 w-80 py-6 flex items-center flex-col mb-3 mt-3\">\r\n        <h1 class=\"text-6xl font-billabong text-black dark:text-white mb-2\">{{ title }}</h1>\r\n        <form class=\"mt-8 w-auto flex flex-col mb-2\" action=\"{{ url_for('routes.register') }}\" method=\"POST\">\r\n\r\n            {{ form.hidden_tag() }}\r\n\r\n            {{ form.username(class=\"text-xs w-full mb-2 rounded border bg-white dark:bg-gray-700 border-gray-300\r\n            dark:border-black px-2 py-2\r\n            focus:outline-none\r\n            focus:border-gray-400 active:outline-none text-black dark:text-gray-300\", placeholder=\"Username\") }}\r\n\r\n            {{ form.email(class= \"text-xs w-full mb-2 rounded border bg-white dark:bg-gray-700 border-gray-300\r\n            dark:border-black px-2 py-2\r\n            focus:outline-none\r\n            focus:border-gray-400 active:outline-none text-black dark:text-gray-300\", placeholder=\"Email\") }}\r\n\r\n            {{ form.password(class=\"text-xs w-full mb-2 rounded border bg-white dark:bg-gray-700 border-gray-300\r\n            dark:border-black px-2 py-2\r\n            focus:outline-none\r\n            focus:border-gray-400 active:outline-none text-black dark:text-gray-300\", placeholder=\"Password\") }}\r\n\r\n            {{ form.confirm_password(class=\"text-xs w-full mb-4 rounded border bg-white dark:bg-gray-700 border-gray-300\r\n            dark:border-black px-2 py-2\r\n            focus:outline-none\r\n            focus:border-gray-400 active:outline-none text-black dark:text-gray-300\", placeholder=\"Confirm Password\") }}\r\n\r\n            {{ form.submit(class=\"text-sm text-center bg-blue-300 dark:bg-gray-400 text-white dark:text-gray-900 py-1\r\n            mt-2\r\n            rounded font-medium\",\r\n            value=\"Register\")\r\n            }}\r\n\r\n        </form>\r\n    </div>\r\n</div>\r\n{% endblock %}\r\n"
        },
        "user_page.html": {
          "content": "{% extends 'base.html' %}\r\n"
        }
      },
      "__init__.py": {
        "content": "from flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_login import LoginManager\r\nimport dotenv, os, logging\r\nfrom logging.handlers import RotatingFileHandler\r\n\r\n# set the project root directory as an environment variable to be used in other modules\r\nos.environ[\"PROJECT_ROOT\"] = os.path.abspath(\r\n    os.path.join(os.path.abspath(os.path.dirname(__file__)), os.pardir)\r\n)\r\nos.environ[\"ENV_PATH\"] = os.path.join(os.environ.get(\"PROJECT_ROOT\"), \".env\")\r\ncheck_for_dotenv = os.path.exists(os.environ.get(\"ENV_PATH\"))\r\n\r\nif check_for_dotenv:\r\n    # if the .env file exists, load it into the environment\r\n    dotenv.load_dotenv(dotenv_path=os.environ.get(\"ENV_PATH\"))\r\n    print(\"loaded environment variables from .env file\")\r\n    os.environ[\"ENV_MODE\"] = \"dev\"\r\nelse:\r\n    print(\"Loading environment variables from system.\")\r\ntry:\r\n    assert os.environ.get(\"SQLALCHEMY_DATABASE_URI\") is not None\r\n    assert os.environ.get(\"SECRET_KEY\") is not None\r\n    assert os.environ.get(\"ADMIN_PASSWORD\") is not None\r\nexcept AssertionError as e:\r\n    print(\"One or more missing environment variables.\")\r\n    raise e\r\n\r\n# initialize the app configuration with the utils module and Config class\r\nclass Config:\r\n    \"\"\"\r\n    @field SQLALCHEMY_DATABASE_URI: The URI for the database.\r\n    @field UPLOADS_FOLDER: The folder where uploaded files are stored.\r\n    @field THUMBNAILS_FOLDER: The folder where thumbnails are stored.\r\n    @field SECRET_KEY: The secret key for the app.\r\n    @field SQLALCHEMY_TRACK_MODIFICATIONS: Whether to track modifications to the database.\r\n    @field SQLALCHEMY_ECHO: Whether to echo SQL statements to the console.\r\n    @field ADMIN_PASSWORD: The password for the admin user.\r\n    \"\"\"\r\n\r\n    SQLALCHEMY_DATABASE_URI = os.environ.get(\"SQLALCHEMY_DATABASE_URI\")\r\n    UPLOADS_FOLDER = os.environ.get(\"PROJECT_ROOT\") + \"/app/static/uploads\"\r\n    THUMBNAILS_FOLDER = (\r\n        os.environ.get(\"PROJECT_ROOT\") + \"/app/static/uploads/thumbnails\"\r\n    )\r\n    SECRET_KEY = os.environ.get(\"SECRET_KEY\")\r\n    SQLALCHEMY_TRACK_MODIFICATIONS = (\r\n        os.environ.get(\"SQLALCHEMY_TRACK_MODIFICATIONS\") or False\r\n    )\r\n    SQLALCHEMY_ECHO = os.environ.get(\"SQLALCHEMY_ECHO\") or False\r\n    ADMIN_PASSWORD = os.environ.get(\"ADMIN_PASSWORD\")\r\n\r\n\r\n# create the folder structure for the uploads and thumbnails, if they do not exist\r\nos.makedirs(Config.THUMBNAILS_FOLDER, exist_ok=True)\r\n\r\n# create an instance of the Config class\r\nconf = Config()\r\n\r\n# initialize the database\r\ndb: SQLAlchemy = SQLAlchemy()\r\n\r\n# initialize the login manager\r\nlogin_manager = LoginManager()\r\n\r\n# set the login view for the login manager\r\nlogin_manager.login_view = \"routes.login\"\r\n\r\n\r\n# create the app factory function and register the blueprints and database\r\ndef create_app():\r\n    \"\"\"\r\n    Create the app instance and register the blueprints and database.\r\n    @return: The app instance.\r\n    \"\"\"\r\n    # create the flask app instance\r\n    app = Flask(__name__)\r\n\r\n    # load the app configuration\r\n    app.config.from_object(Config)\r\n\r\n    log_level = logging.INFO\r\n\r\n    # Define the log file path\r\n    log_file_path = f\"{os.environ['PROJECT_ROOT']}/app.log\"\r\n\r\n    # Create a log formatter\r\n    log_formatter = logging.Formatter(\r\n        \"[%(asctime)s] [%(levelname)s] %(message)s\",\r\n        datefmt=\"%Y-%m-%d %H:%M:%S\",\r\n    )\r\n\r\n    # Create a rotating file handler to log messages to the file\r\n    file_handler = RotatingFileHandler(log_file_path, maxBytes=1000000, backupCount=5)\r\n    file_handler.setFormatter(log_formatter)\r\n\r\n    # Get the app's logger and add the file handler to it\r\n    app.logger.addHandler(file_handler)\r\n\r\n    # Set the log level for the app's logger\r\n    app.logger.setLevel(log_level)\r\n\r\n    # initialize the database\r\n    db.init_app(app)\r\n\r\n    # initialize the login manager\r\n    login_manager.init_app(app)\r\n\r\n    # using the app context, register the blueprints and models\r\n    with app.app_context():\r\n\r\n        # import the routes and models modules\r\n        from . import routes\r\n        from . import models\r\n\r\n        # register the blueprints\r\n        app.register_blueprint(routes.endpoint)\r\n\r\n        # create the database tables if they do not exist\r\n        db.create_all()\r\n\r\n        from .scripts import test_memes\r\n        test_memes.generate_test_memes()\r\n        # return the app instance\r\n        return app\r\n\r\n\r\n# create the app instance\r\napp = create_app()\r\n"
      },
      "__pycache__": {
        "content": "ignored"
      }
    },
    "app.log": {
      "content": "ignored"
    },
    "Meme-Share_directoryStructure.json": {
      "content": "ignored"
    },
    "node_modules": {
      "content": "ignored"
    },
    "package-lock.json": {
      "content": "ignored"
    },
    "package.json": {
      "content": "ignored"
    },
    "requirements.txt": {
      "content": "Flask==2.2.3\r\nFlask-Login==0.6.2\r\nFlask-SQLAlchemy==3.0.3\r\nFlask-WTF==1.1.1\r\nWTForms==3.0.1\r\npython-dotenv==1.0.0\r\npsycopg2==2.9.6\r\nPillow==10.0.0\r\nemail-validator==2.0.0.post2\r\n"
    },
    "run.py": {
      "content": "from app import app\r\nfrom app.scripts import test_memes\r\n\r\nif __name__ == \"__main__\":\r\n    # app.run(\r\n        # host=\"127.0.0.1\", port=5505, debug=True\r\n    # )  # debug=True is only for development\r\n    # app.run()\r\n    print(\"done\")\r\n"
    },
    "scripts": {
      "dirToJson.js": {
        "content": "const fs = require(\"fs\");\r\nconst path = require(\"path\");\r\n\r\n// get the path where this script is located to know where to open the ignores.json file\r\nconst scriptPath = path.resolve(__dirname);\r\n// parse the directory path from the command line\r\nconst dirPath = process.argv[2];\r\nconst savePathFlag = process.argv[3]\r\n  ? process.argv[3] === \"-s\" || process.argv[3] === \"--save\"\r\n  : false;\r\nlet saveToPath = \"\";\r\nif (savePathFlag) {\r\n  saveToPath = process.argv[4];\r\n}\r\n// parse the name of the starting dir from the path\r\nconst dirName = path.resolve(dirPath).split(\"\\\\\").pop();\r\n\r\n/**\r\n * dirToJson\r\n * @param {string} dirPath the path to the directory to be parsed\r\n * @param {string} saveToPath the path to save the json file to default: dirPath\r\n * @param {object} dirJson the object to save the file structure to for recursive calls. default: {}\r\n * file structure schema for dirJson:\r\n *\r\n * the function will recurse starting at the dirPath and build the\r\n * file structure moving forward only (no backtracking)\r\n */\r\nconst dirToJson = async (dirPath, dirJson = {}, _dirName = dirName) => {\r\n  // check the directory path is valid\r\n  await dirIsValid(dirPath);\r\n\r\n  // create the dirName key in the dirJson object\r\n  dirJson[_dirName] = {};\r\n\r\n  // read the directory\r\n  const dir = await readFiles(dirPath);\r\n\r\n  // loop through the files in the directory\r\n  for (let file of dir) {\r\n    if (await isIgnoredFile(file)) {\r\n      dirJson[_dirName][file] = { content: \"ignored\" };\r\n    } else {\r\n      if (fs.lstatSync(`${dirPath}/${file}`).isDirectory()) {\r\n        await dirToJson(`${dirPath}/${file}`, dirJson[_dirName], file);\r\n      } else {\r\n        await fs.promises\r\n          .readFile(`${dirPath}/${file}`, \"utf8\")\r\n          .then((data) => {\r\n            dirJson[_dirName][file] = { content: data };\r\n          })\r\n          .catch((err) => {\r\n            log(err);\r\n            log(`unable to read ${file}`);\r\n            dirJson[_dirName][file] = { content: \"Unreadable\" };\r\n          });\r\n      }\r\n    }\r\n  }\r\n  return dirJson;\r\n};\r\n\r\nconst getIgnoredFiles = async () => {\r\n  // load the ignored files list from ignores.json\r\n  const ignoredFiles = await fs.promises\r\n    .readFile(`${scriptPath}/ignores.json`, \"utf8\")\r\n    .then((data) => {\r\n      return JSON.parse(data);\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n      process.exit(1);\r\n    });\r\n  return ignoredFiles;\r\n};\r\n\r\nconst addIgnored = async (file) => {\r\n  // load the ignored files list from ignores.json\r\n  const ignoredFiles = await getIgnoredFiles();\r\n\r\n  // add the file to the list\r\n  ignoredFiles.push(file);\r\n\r\n  // write the list back to ignores.json\r\n  await fs.promises\r\n    .writeFile(\"./ignores.json\", JSON.stringify({ ignoredFiles: ignoredFiles }))\r\n    .then(() => log(\"ignores.json updated\"))\r\n    .catch((err) => {\r\n      console.error(err);\r\n      process.exit(1);\r\n    });\r\n};\r\n\r\nconst dirIsValid = async (dirPath) => {\r\n  // check the directory path is valid\r\n  await fs.promises\r\n    .access(dirPath, fs.constants.F_OK)\r\n    .then((res) => res)\r\n    .catch((err) => {\r\n      console.error(err);\r\n      process.exit(1);\r\n    });\r\n};\r\n\r\nconst readFiles = async (dirPath) => {\r\n  // read the directory\r\n  const dir = await fs.promises\r\n    .readdir(dirPath)\r\n    .then((files) => {\r\n      return files;\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n      process.exit(1);\r\n    });\r\n  return dir;\r\n};\r\n\r\nconst isIgnoredFile = async (file) => {\r\n  // load the ignored files list from ignores.json\r\n  const ignored = await getIgnoredFiles();\r\n  const ignoredFiles = ignored.ignoredFiles;\r\n\r\n  let extension = null;\r\n  if (file.includes(\".\")) {\r\n    extension = file.split(\".\").pop() ? file.split(\".\").pop() : null;\r\n  }\r\n  console.log(\"extension\", extension);\r\n  // check if the file is in the list\r\n  if (!extension) {\r\n    return ignoredFiles.includes(file);\r\n  } else {\r\n    return ignoredFiles.includes(extension);\r\n  }\r\n};\r\n\r\nconst saveJson = async (saveToPath, dirJson) => {\r\n  await fs.promises.writeFile(saveToPath, dirJson);\r\n};\r\n\r\n// Now call the main function\r\ndirToJson(dirPath).then((dirJson) => {\r\n  if (savePathFlag && saveToPath !== \"\") {\r\n    try {\r\n      saveJson(\r\n        `${saveToPath}/${dirName}_directoryStructure.json`,\r\n        JSON.stringify(dirJson, null, 2)\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n      process.exit(1);\r\n    }\r\n  } else {\r\n    try {\r\n      saveJson(\r\n        `${dirPath}/${dirName}_directoryStructure.json`,\r\n        JSON.stringify(dirJson, null, 2)\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n      process.exit(1);\r\n    }\r\n  }\r\n});\r\n\r\nconst log = (message) => {\r\n  try {\r\n    fs.appendFileSync(`${scriptPath}/log.txt`, String(message));\r\n  } catch {\r\n    fs.writeFileSync(`${scriptPath}/log.txt`, String(message));\r\n  }\r\n};\r\n"
      },
      "generate_memes.js": {
        "content": "const args = process.argv.slice(2);\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst https = require(\"https\");\r\n\r\nconst getMeme = async () => {\r\n  const response = fetch(\"https://picsum.photos/1200/800\")\r\n    .then((response) => {\r\n      if (verbose) {\r\n        console.log(\"response:\", response);\r\n      }\r\n      return response.url;\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Error:\", error);\r\n    });\r\n  return response;\r\n};\r\n\r\n// parse the args and set the variables\r\nlet savePath = process.cwd();\r\nlet numMemes = 3;\r\nlet verbose = false;\r\nlet help = false;\r\nlet arg;\r\nfor (let i = 0; i < args.length; i++) {\r\n  arg = args[i];\r\n  if (arg === \"-p\") {\r\n    savePath = args[i + 1];\r\n    i++;\r\n  } else if (arg === \"-v\") {\r\n    verbose = true;\r\n  } else if (arg === \"-h\") {\r\n    help = true;\r\n  } else {\r\n    numMemes = parseInt(arg);\r\n  }\r\n}\r\n\r\n// if help is requested, print help and exit\r\nif (help) {\r\n  console.log(\r\n    \"Usage: node generate_memes.js [-p save_path] [num_memes] [-v] [-h]\"\r\n  );\r\n  console.log(\"  -p: optional save path, default is current directory\");\r\n  console.log(\r\n    \"  num_memes: optional number of memes to generate, default is 3\"\r\n  );\r\n  console.log(\"  -v: optional verbose\");\r\n  console.log(\"  -h: optional help\");\r\n  process.exit(0);\r\n}\r\n\r\n// if verbose, print the args\r\nif (verbose) {\r\n  console.log(\"savePath:\", savePath);\r\n  console.log(\"numMemes:\", numMemes);\r\n  console.log(\"verbose:\", verbose);\r\n}\r\n\r\n// create the save path if it doesn't exist\r\nif (!fs.existsSync(savePath)) {\r\n  fs.mkdirSync(savePath);\r\n}\r\n\r\n// fetch the 'memes' from picsum.photos\r\nfor (let i = 0; i < numMemes; i++) {\r\n  getMeme().then((url) => {\r\n    if (verbose) {\r\n      console.log(\"url:\", url);\r\n    }\r\n    const fileName = path.join(savePath, `meme${i}.jpg`);\r\n    const file = fs.createWriteStream(fileName);\r\n    const request = https.get(url, (response) => {\r\n      response.pipe(file);\r\n    });\r\n  });\r\n}\r\n"
      },
      "ignores.json": {
        "content": "ignored"
      },
      "resize.js": {
        "content": "const sharp = require('sharp');\r\nconst path = require('path');\r\n\r\nconst args = process.argv.slice(2);\r\nconst imagePath = args[0];\r\nconst size = args[1].split(':').map(Number);\r\n\r\nsharp(imagePath)\r\n    .resize(size[0], size[1])\r\n    .toFile(path.join(path.dirname(imagePath), `resized_${path.basename(imagePath)}`), (err, info) => {\r\n        if (err) throw err;\r\n        console.log(info);\r\n    });\r\n"
      },
      "run.ps1": {
        "content": "param (\r\n    [Parameter(Position = 0, Mandatory = $true, HelpMessage = \"Specify the environment (dev or prod).\")]\r\n    [ValidateSet(\"dev\", \"prod\")]\r\n    [string] $environment\r\n)\r\n\r\nif ($environment -eq \"dev\") {\r\n    . .\\.venv\\Scripts\\Activate.ps1\r\n    flask.exe run --reload --debugger\r\n}\r\nelseif ($environment -eq \"prod\") {\r\n    . .\\.venv\\Scripts\\Activate.ps1\r\n    flask.exe run\r\n}\r\nelse {\r\n    Write-Host \"Invalid environment specified. Use 'dev' or 'prod'.\"\r\n    Write-Help\r\n}\r\n"
      },
      "run.sh": {
        "content": "#!/bin/bash\n\n# Function to display help message\nfunction show_help {\n    echo \"Usage: $0 <environment>\"\n    echo \"  environment: Specify the environment (dev or prod).\"\n    echo \"Examples:\"\n    echo \"  $0 dev\"\n    echo \"  $0 prod\"\n}\n\n# Check if an argument is provided\nif [ $# -eq 0 ]; then\n    echo \"Error: No arguments provided.\"\n    show_help\n    exit 1\nfi\n\n# Check if the provided environment is valid\nif [ \"$1\" != \"dev\" ] && [ \"$1\" != \"prod\" ]; then\n    echo \"Error: Invalid environment specified. Use 'dev' or 'prod'.\"\n    show_help\n    exit 1\nfi\n\n# Activate the virtual environment and run Flask accordingly\nif [ \"$1\" == \"dev\" ]; then\n    source ./.venv/bin/activate\n    flask run --reload --debugger\nelif [ \"$1\" == \"prod\" ]; then\n    source ./.venv/bin/activate\n    flask run\nfi\n"
      },
      "__init__.py": {
        "content": "from .. import app as app\r\n"
      }
    },
    "tailwind.config.js": {
      "content": "module.exports = {\r\n  content: [\"./app/templates/**/*.html\", \"./app/static/css/**/*.css\"],\r\n  theme: {\r\n    extend: {\r\n      fontFamily: {\r\n        billabong: [\"billabong\"],\r\n      },\r\n    },\r\n  },\r\n  variants: {\r\n    extend: {},\r\n  },\r\n  plugins: [],\r\n};\r\n"
    }
  }
}